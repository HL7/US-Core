I"
<p><strong>Storyboard for this example</strong></p>

<p>This example is based upon the following scenario:</p>

<p>Patient 1137192 uses an App to request all his encounters from the provider. The provider system requires status and rejects the request returning a <code class="highlighter-rouge">400</code> and an OperationOutcome specifying that a status parameter is required for this search.</p>

<p><strong>Request:</strong></p>

<p>Get “all encounters” for a patient 1137192 by querying Encounter using the patient search parameter.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET [base]/Encounter?patient=1137192
</code></pre></div></div>

<p><strong>Response:</strong></p>

<p>Instead of returning a search Bundle resource containing all the Encounter for the patient, the server return a <code class="highlighter-rouge">400 Not Found</code> and an OperationOutcome detailing that a status parameter is required for this search.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 400 Not Found
[other headers]
{
  "resourceType": "OperationOutcome",
  "id": "no-status",
  "issue": [
    {
      "severity": "error",
      "code": "business-rule",
      "details": {
        "text": "A \"status\" search parameter is required for this search"
      },
      "diagnostics": "valid statuses for Encounter include planned | arrived | triaged | in-progress | onleave | finished | cancelled | entered-in-error | unknown"
    }
  ]
}
</code></pre></div></div>
:ET